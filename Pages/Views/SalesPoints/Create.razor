@page "/SalesPoints/Create"
@inject Data.ApplicationDbContext dbContext
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize(Roles = "vendor")]

<h3>Create sales point</h3>

<EditForm Model="salesPointToAdd" OnValidSubmit="CreateSalesPointAsync">
    <div class="form-group mb-3">
        <label for="name">Name</label>
        <InputText @bind-Value="salesPointToAdd.Name" class="form-control" id="name" />
    </div>
    <div class="form-group mb-3">
        <label for="street">Street</label>
        <InputText @bind-Value="salesPointToAdd.Street" class="form-control" id="street" />
    </div>
    <div class="form-group mb-3">
        <label for="number">Number</label>
        <InputText @bind-Value="salesPointToAdd.Number" class="form-control" id="number" />
    </div>
    <div class="form-group mb-3">
        <label for="postCode">Post Code</label>
        <InputText @bind-Value="salesPointToAdd.PostCode" class="form-control" id="postCode" />
    </div>
    <div class="form-group mb-3">
        <label for="city">City</label>
        <InputText @bind-Value="salesPointToAdd.City" class="form-control" id="city" />
    </div>
    
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-success" type="submit">
        Create
    </button>

    <button @onclick="@(() => NavigationManager.NavigateTo("/SalesPoints"))" class="btn btn-secondary">
        Cancel
    </button>
</EditForm>

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@code {
    private SalesPoint salesPointToAdd = new SalesPoint();
    private string currUserId = string.Empty;

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    protected override async Task OnInitializedAsync()
    {
        currUserId = await getUserId();
    }

    private async Task CreateSalesPointAsync()
    {
        var user = dbContext.Users.Find(await getUserId());
        salesPointToAdd.Vendor = user;

        await dbContext.SalesPoints.AddAsync(salesPointToAdd);

        if (await dbContext.SaveChangesAsync() > 0)
        {
            NavigationManager.NavigateTo("/SalesPoints");
        }
        else
        {
            string errorMessage = "ERROR: Failed to create sales point.";
            await JsRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }
}