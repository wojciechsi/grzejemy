@page "/Offers/Create"
@inject Data.ApplicationDbContext dbContext
@inject AuthenticationStateProvider _authenticationStateProvider
@attribute [Authorize(Roles = "vendor")]

<h3>Create offer</h3>

<EditForm Model="offerToAdd" OnValidSubmit="CreateOfferAsync">
    <div class="form-group row">
        <label for="salesPoint">SalesPoint</label>
        <InputSelect @bind-Value="salesPointId" class="form-control" id="salesPoint">
            <option value="0">Select a salespoint</option>
            @foreach (var sp in salesPoints)
            {
                <option value="@sp.Id">@sp.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group row">
        <label for="fuelType">FuelType</label>
        <InputSelect @bind-Value="fuelTypeId" class="form-control" id="fuelType">
            <option value="0">Select fuel type</option>
            @foreach (var ft in fuelTypes)
            {
                <option value="@ft.Id">@ft.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group mb-3">
        <label for="price">Price</label>
        <InputNumber @bind-Value="offerToAdd.Price" class="form-control" id="name" />
    </div>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-success" type="submit">
        Create
    </button>

    <button @onclick="@(() => NavigationManager.NavigateTo("/Offers"))" class="btn btn-secondary">
        Cancel
    </button>
</EditForm>

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@code {
    private Offer offerToAdd = new Offer();

    private List<FuelType> fuelTypes = new List<FuelType>();

    private List<SalesPoint> salesPoints = new List<SalesPoint>();

    private int fuelTypeId = 0;
    private int salesPointId = 0;
    private string currUserId = string.Empty;

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

    protected override async Task OnInitializedAsync()
    {
        currUserId = await getUserId();
        fuelTypes = await dbContext.FuelTypes
            .AsNoTracking()
            .ToListAsync();
        salesPoints = await dbContext.SalesPoints
            .Where(s => s.Vendor.Id.Equals(currUserId))
            .ToListAsync();
    }

    private async Task CreateOfferAsync()
    {

        offerToAdd.FuelType = dbContext.FuelTypes.Find(fuelTypeId);
        offerToAdd.SalesPoint = dbContext.SalesPoints.Find(salesPointId);

        await dbContext.Offers.AddAsync(offerToAdd);

        if (await dbContext.SaveChangesAsync() > 0)
        {
            NavigationManager.NavigateTo("/Offers");
        }
        else
        {
            string errorMessage = "ERROR: Failed to create offer.";
            await JsRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }
}