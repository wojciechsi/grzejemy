@page "/Offers/Update/{Id:int}"
@inject Data.ApplicationDbContext dbContext
@attribute [Authorize(Roles = "vendor")]

<h1>Updating offer</h1>

<EditForm Model="offerToUpdate" OnValidSubmit="UpdateOfferAsync">
    <div class="form-group mb-3">
        <label for="price">price</label>
        <InputText (float)@bind-Value="offerToUpdate.Price" class="form-control" id="price" />
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-success" type="submit">
        Update
    </button>

    <button @onclick="@(() => NavigationManager.NavigateTo("/Offers"))" class="btn btn-secondary">
        Cancel
    </button>
</EditForm>

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@code {
    [Parameter] public int id { get; set; }

    private Offer offerToUpdate = null;

    protected override async Task OnParametersSetAsync()
    {
        offerToUpdate = await dbContext.Offers.FindAsync(id);
    }

    private async Task UpdateOfferAsync()
    {
        dbContext.Offers.Update(offerToUpdate);

        if (await dbContext.SaveChangesAsync() > 0)
        {
            NavigationManager.NavigateTo("/Offers");
        }
        else
        {
            string errorMessage = "ERROR: Failed to update offer.";
            await JsRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }
}

