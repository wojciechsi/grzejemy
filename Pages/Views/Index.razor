@page "/"
@inject Data.ApplicationDbContext dbContext
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@using Radzen
@using Radzen.Blazor
@using Microsoft.EntityFrameworkCore
@using System.Globalization

<PageTitle>grzejemy.pl</PageTitle>

<head>
 
    <link rel="stylesheet" href="./Index.razor.css">


</head>

<body>
    <div class="brandname">
        <h1>grzejemy.pl</h1>
        <img src="/logogrzejemy.png">
    </div>

    <AuthorizeView Roles="vendor-candidate">
        <div class="info">Twoja prośba o zostanie sprzedawcą jest w trakcie weryfikacji. Prosimy o cierpliwość.</div>
    </AuthorizeView>

    <a class="button-77" role="button" href="/offers">Wyszukaj idealną ofertę</a>

    <div class="container">
        <div class="row">
            <div class="col-sm-12 my-5">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                    <RadzenSelectBar @bind-Value=@fuelTypeSelected TValue="FuelType" Change=@(args => OnFuelTypeChange(args, "SelectBar with single selection"))>
                        <Items>
                            @if (fuelTypes != null)
                            {
                                @foreach (var fuelType in fuelTypes)
                                {
                                    <RadzenSelectBarItem Text="@fuelType.Name" Value="@fuelType" />
                                }
                            }
                        </Items>
                    </RadzenSelectBar>
                </RadzenCard>
                <RadzenChart @ref="chart">
                    <RadzenLineSeries Data="@data" CategoryProperty="Date" Title="wegiel" LineType="LineType.Dashed" ValueProperty="Average">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                    </RadzenLineSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Cena w złotówkach" />
                    </RadzenValueAxis>
                </RadzenChart>

            </div>
        </div>
    </div>
</body>

@code{
    List<FuelType> fuelTypes;
    FuelType fuelTypeSelected = null;

    class DataItem
    {
        public DataItem(DateTime date, double average)
        {
            Date = date.ToString();
            Average = average;
        }

        public string Date { get; set; }
        public double Average { get; set; }
    }

    List<DataItem> data = new List<DataItem>();
    RadzenChart chart;

    protected override async Task OnInitializedAsync()
    {
        fuelTypes = await dbContext.FuelTypes.ToListAsync();
        fuelTypeSelected = fuelTypes.FirstOrDefault();
        await loadDataToChart();
    }

    private struct AverageStamped
    {
        public AverageStamped(int year, int month, double average)
        {
            Year = year;
            Month = month;
            Average = average;
        }

        public int Year { get; }
        public int Month { get; }
        public double Average { get; }
    }

    protected async Task loadDataToChart()
    {
        data.Clear();


        var model = await dbContext.Offers
            .Where(o => o.FuelType == fuelTypeSelected)
            .GroupBy(o => new
            {
                Month = o.Date.Month,
                Year = o.Date.Year
            }).Select(g => new AverageStamped
            (
                g.Key.Year,
                g.Key.Month,
                g.Average(o => o.Price)
            )).ToListAsync();


        foreach (var line in model)
        {
            var date = new DateTime(line.Year, line.Month, 1);
            data.Add(new DataItem(date, line.Average));
        }

        chart.Reload();
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("pl"));
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM yyyy");
        }

        return string.Empty;
    }

    async Task OnFuelTypeChange(FuelType value, string name)
    {
        fuelTypeSelected = value;
        await loadDataToChart();
        chart.Reload();
    }
}
